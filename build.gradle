buildscript {
    repositories {
        if (project.gradle.startParameter.offline) {
            maven {
                url = uri("/home/gogo/localRepo/offline-maven-repo")
            }
            /*
            maven {
                url = uri('/home/gogo/localRepo/.m2')
            }
            mavenLocal()
            flatDir {
                dirs '/home/gogo/localRepo/needJar'
            }
            */
        } else {
            gradlePluginPortal()
            mavenCentral()
        }
    }
    dependencies {
        classpath 'org.springframework.boot:spring-boot-gradle-plugin:3.5.4'
        classpath 'io.spring.gradle:dependency-management-plugin:1.1.7'
    }
}


plugins {
	id 'java'
    id 'war'
	id 'org.springframework.boot' version '3.5.4'
	id 'io.spring.dependency-management' version '1.1.7'
}

group = 'idv.pd'
version = '0.0.1-SNAPSHOT'

tasks.withType(JavaCompile) {
    sourceCompatibility = '21'
    targetCompatibility = '21'
    options.encoding = 'UTF-8'
}

compileJava.dependsOn clean

sourceSets.main.output.resourcesDir = file('$buildDir/resources')
ext {
}

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
    println project.gradle.startParameter.offline
    if (project.gradle.startParameter.offline) {
        maven {
            url = uri("/home/gogo/localRepo/offline-maven-repo")
        }
        /*
        maven {
            url = uri('/home/gogo/localRepo/.m2')
        }
        mavenLocal()
        flatDir {
            dirs '/home/gogo/localRepo/needJar'
        }
        */
    } else {
        //gradlePluginPortal()
        mavenCentral()
    }
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.named('test') {
	useJUnitPlatform()
}

task cacheToLocal(type: Copy) {
    //enabled = false
    //project.delete(files('E:/DEV/needJar') {})
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
	from new File(gradle.gradleUserHomeDir, 'caches/modules-2/files-2.1')
	into '/home/gogo/localRepo/needJar'
	eachFile {
	    List<String> parts = it.path.split('/')
	    it.path = parts[4]
	}
	includeEmptyDirs = false
}

task cacheToMavenLocal(type: Copy) {
    //enabled = false
    //project.delete(files('E:/DEV/.m2') {})
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
	from new File(gradle.gradleUserHomeDir, 'caches/modules-2/files-2.1')
	into '/home/gogo/localRepo/.m2'
	eachFile {
	    List<String> parts = it.path.split('/')
	    //it.path = (parts[0] + '/' + parts[1]).replace('.', '/') + '/' + parts[2] + '/' + parts[4] // 舊版寫法
	    it.path = parts[0].replace('.', '/') + '/' + parts[1] + '/' + parts[2] + '/' + parts[4]
	    println "itpath:" + it.path
	    println "itpath0:" + parts[0]
	    println "itpath1:" + parts[1]
	    println "itpath2:" + parts[2]
	    println "itpath3:" + parts[3]
	    println "itpath4:" + parts[4]
	}
	includeEmptyDirs = false
}

task printInfo {
	println gradle.gradleUserHomeDir
	println gradle.gradleHomeDir
	println repositories.mavenLocal().url
}

configure(cacheToLocal) {
    group = 'jenkins'
    description = '建立離線Jar'
}

configure(cacheToMavenLocal) {
    group = 'jenkins'
    description = '建立離線Maven Repository'
}

configure(printInfo) {
    group = 'jenkins'
    description = '印出資訊'
}

import org.gradle.api.artifacts.ResolvedArtifact

// 設定本地 Maven repository 路徑
def localRepoDir = file("$buildDir/offline-maven-repo")

task packAllDependencies {
    description = "下載並打包專案所有依賴到本地 Maven repo，離線可用"
    group = "Build"

    doLast {
        println "開始打包所有依賴到本地 Maven repo: $localRepoDir"

        // 遍歷所有可解析的 configuration
        configurations.matching { it.canBeResolved }.each { conf ->
            println "處理 configuration: ${conf.name}"

            conf.resolvedConfiguration.resolvedArtifacts.each { ResolvedArtifact artifact ->

                // 構建對應目錄結構
                def modulePath = "${artifact.moduleVersion.id.group.replace('.', '/')}/${artifact.name}/${artifact.moduleVersion.id.version}/"
                def destDir = new File(localRepoDir, modulePath)
                destDir.mkdirs()

                // 複製 jar
                def destJar = new File(destDir, "${artifact.name}-${artifact.moduleVersion.id.version}.jar")
                artifact.file.withInputStream { is ->
                    destJar.withOutputStream { os ->
                        os << is
                    }
                }

                // 生成簡單 pom 文件
                def pomFile = new File(destDir, "${artifact.name}-${artifact.moduleVersion.id.version}.pom")
                if (!pomFile.exists()) {
                    pomFile.text = """
                        <project>
                            <modelVersion>4.0.0</modelVersion>
                            <groupId>${artifact.moduleVersion.id.group}</groupId>
                            <artifactId>${artifact.name}</artifactId>
                            <version>${artifact.moduleVersion.id.version}</version>
                        </project>
                    """.stripIndent()
                }

                println "打包完成: ${artifact.name}-${artifact.moduleVersion.id.version}"
            }
        }

        println "所有依賴已打包完成！"
        println "離線使用時，在 build.gradle 設定 repositories { maven { url '$localRepoDir' } }"
    }
}

configure(packAllDependencies) {
    group = 'jenkins'
    description = '下載並打包專案所有依賴到本地 Maven repo，離線可用'
}